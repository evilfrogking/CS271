// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current // done
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output //done
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction //done

    PARTS:
    // Put your code here:

    // ALU
    ALU(x=outD, y=outA-M, zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out= outALU, zr=zr, ng=ng); //maybe just out ALU?
    

    // Registers
    ARegister(in=inA, load=loadA, out=outA);
    DRegister(in=outALU, load=loadD, out=outD);
    PC(in=outA, load=loadPC, inc=inc, reset=reset, out[0..14]=pc); // could it not be pc[0..14] ?

    // Muxes
    // instA Mux
    Mux(a=outALU, b=instruction, sel=instA, out=inA); // not instruction[12]?
    // AM-ALU Mux
    Mux(a=outA, b=inM, sel=AM-ALU, out=outA-M);

    // Logic Gates
        /* instA Mux
            - Negate; if instA ==1 after negation, got to AReg.
        */
        Not(in=instruction[15], out=instA);

        /*DRegister - loadD
            - Check if MSB is 1 AND dest D bit is set
            */
        And(a=instruction[15], b=instruction[4], out=outD);
        
        /*PC inc or loadPC
            - Increment is true unless loadPC is true.
            - Jump logics:
                JUMP | j1  j2  j3 <-(instruction[0..2])
                -------------------
                null | 0   0   0
                JGT  | 0   0   1  <- instruction[0]
                JEQ  | 0   1   0  <- instruction[1]
                JGE  | 0   1   1
                JLT  | 1   0   0  <- instruction[2]
                JNE  | 1   0   1
                JLE  | 1   1   0
                JMP  | 1   1   1
        */



}


/*
I gave up on keeping track of variables here.
Instead, I focused on keeping track of the instruction bits I was using.
instruction[14, 13, 12, 5, 3]
*/
