// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current // done
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output //done
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction //done

    PARTS:
    // Put your code here:

    // ALU
        ALU(x=outD, y=outA-M, zx=instruction[11], nx=instruction[10], zy=instruction[9],
            ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out= outALU, zr=zr, ng=ng);

    // Registers
        ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);
        DRegister(in=outALU, load=loadD, out=outD);
        PC(in=outA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

    // Muxes
        // instA Mux
        Mux16(a=outALU, b=instruction, sel=instA, out=inA);
        // AM-ALU Mux
        Mux16(a=outA, b=inM, sel=AM-ALU, out=outA-M);

    // Logic Gates
        // Registers
            // ARegister 0 loadA
            And(a=instC, b=instruction[5], out=destA);
            Or(a=instA, b=destA, out=loadA);
            /*DRegister - loadD
            - Check if MSB is 1 AND dest D bit is set
            */
            And(a=instruction[15], b=instruction[4], out=loadD);

            /*PC
                - Jump logics:
                    JUMP | j1  j2  j3 <-(instruction[0..2])
                    -------------------
                    null | 0   0   0
                    JGT  | 0   0   1  <- instruction[0]
                    JEQ  | 0   1   0  <- instruction[1]
                    JGE  | 0   1   1  <- instruction[1+0]
                    JLT  | 1   0   0  <- instruction[2]
                    JNE  | 1   0   1  <- instruction[2+0]
                    JLE  | 1   1   0  <- instruction[2+1]
                    JMP  | 1   1   1  <- instruction[2+1+0]
            */
                // Check if it is a C instruction
                Not(in=instA, out=instC);
                /* JGT
                    - needs to check if a number is not 0 or negative
                    - if pos == 1, number is positive; if pos == 0, number is negative
                */
                Or(a=zr, b=ng, out=ZorN);
                Not(in=ZorN, out=pos);
                And(a=instruction[0], b=pos, out=JGT);

                /*JEQ
                    - if the number is zero AND the instruction bit is on, then jump
                */
                And(a=zr, b=instruction[1], out=JEQ);

                /*JGE
                    - if pos == 1 OR zr == 1
                */
                Or(a=JGT, b=JEQ, out=JGE);

                /*JLT
                    - if ng == 1 AND the instruction bit is on, jump
                */
                And(a=ng, b=instruction[2], out=JLT);

                // JNE
                Or(a=JGT, b=JLT, out=JNE);

                // JLE
                Or(a=JLT, b=JEQ, out=JLE); 

                /*JMP
                    - unconditinal jump
                */
                Or(a=JGE, b=JLT, out=JMP);

                /*loadPC 
                    - if any of the conditions are true
                    and MSB is on, loadPC == 1
                */
                Or(a=JGT, b=JEQ, out=J1);
                Or(a=JGE, b=J1, out=J2);
                Or(a=JLT, b=J2, out=J3);
                Or(a=JNE, b=J3, out=J4);
                Or(a=JLE, b=J4, out=J5);
                Or(a=JMP, b=J5, out=J6);
                And(a=instC, b=J6, out=loadPC);
        // Muxes
            /* instA Mux
                - Negate; if instA ==1 after negation, got to AReg.
            */
            Not(in=instruction[15], out=instA);

            /*AM-ALU Mux
                - if it is a c instruction AND the A bit is on.
            */
            And(a=instC, b=instruction[12], out=AM-ALU);
        
        // Out
            // loadM & writeM
            And(a=instC, b=instruction[3], out=loadM, out= writeM);
}


/*
I gave up on keeping track of variables here.
Instead, I focused on keeping track of the instruction bits I was using.
instruction[5] <----- still alomst missed this guy
*/
